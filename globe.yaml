cameras:
    perspective:
        type: perspective
        vanishing_point: [0, 0]
        fov: .00001 # perspective correction
scene:
    background:
        color: black
styles:
    stereo:
        lighting: false
        base: polygons
        shaders:
            defines:
                EARTH_RADIUS: 6378137.0 //radius of ellipsoid, WGS84
                HALF_PI: 1.570796327
            blocks:
                global: |
                    // http://wiki.openstreetmap.org/wiki/Mercator
                    float y2lat_m (float y) { return 2.0*atan(exp((y/EARTH_RADIUS)))-HALF_PI; }
                    float x2lon_m (float x) { return x/EARTH_RADIUS; }

                    // rotation matrix transformations
                    mat3 rotateX3D(float phi){
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi))
                            );
                    }
                    mat3 rotateY3D(float theta){
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D(float psi){
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.)
                            );
                    }

                    // convert the positions from a lat, lon to a position on a sphere.
                    vec3 latLongToVector3(float lat, float lon, float radius) {
                        float phi = lat;
                        float theta = lon;

                        float x = radius * cos(phi) * cos(theta);
                        float y = radius * cos(phi) * sin(theta);
                        float z = radius * sin(phi);
                        // u_map_position.z;
                        return vec3(x,z,y);
                    }

                position: |
                    // mercator position of the current vertex, u_map_position = center of screen,
                    // position.xy = vertex screen position in meters from the center of the screen
                    vec2 mercator = u_map_position.xy + position.xy;
                    float lat = y2lat_m(mercator.y);
                    float lon = x2lon_m(mercator.x);

                    // Latitude_Of_Origin
                    float centerlat = y2lat_m(u_map_position.y);
                    // Central_Meridian
                    float centerlon = x2lon_m(u_map_position.x);

                    // bend map into globe
                    position.xyz = latLongToVector3(lat, lon, 2.) * EARTH_RADIUS;

                    // rotate globe with map navigation
                    // 90 degrees in radians = 1.5708
                    position.xyz *= rotateY3D((-centerlon - 1.5708));
                    position.xyz *= rotateX3D(-(centerlat));

    stereolines:
        base: lines
        mix: stereo
sources:
    osm:
        type: TopoJSON
        url: https://meetar.github.io/mapzen-tiles/vector/v1/256/all/{z}/{x}/{y}.topojson
layers:
    earth:
        data: { source: osm }
        draw:
            stereolines:
                order: function() { return feature.sort_key; }
                color: purple
                width: 3px
    water:
        data: { source: osm }
        filter: { kind: lake }
        draw:
            stereolines:
                order: function() { return feature.sort_key; }
                color: pink
                width: 1px
    boundaries:
        data: { source: osm }
        draw:
            stereolines:
                order: function() { return feature.sort_key; }
                color: cyan
                width: 1px
    roads:
        data: { source: osm }
        draw:
            stereolines:
                order: function() { return feature.sort_key; }
                color: white
                width: 1px
    buildings:
        data: { source: osm }
        draw:
            stereolines:
                order: function() { return feature.sort_key; }
                color: pink
                width: 1px
